generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["perf_review", "GitReports"]
}

model User {
  id                  Int          @id @default(autoincrement())
  name                String
  password            String
  email               String       @unique
  role                Role
  supervisorId        Int?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  evaluationsReceived Evaluation[] @relation("StudentEvaluations")
  evaluationsGiven    Evaluation[] @relation("SupervisorEvaluations")
  teams               Team[]       @relation("UserTeams")
  leadSupervisorTeams Team[]       @relation("LeadSupervisorTeams")
  enabled             Boolean      @default(true)
  disabledAt          DateTime?

  @@map("user")
  @@schema("perf_review")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  leadSupervisorId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]   @relation("UserTeams")
  leadSupervisor   User?    @relation("LeadSupervisorTeams", fields: [leadSupervisorId], references: [id])
  @@schema("perf_review")
}

model Evaluation {
  id           Int      @id @default(autoincrement())
  studentId    Int
  supervisorId Int?
  year         Int
  semester     Semester
  type         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  team         String?

  student    User               @relation("StudentEvaluations", fields: [studentId], references: [id])
  supervisor User?              @relation("SupervisorEvaluations", fields: [supervisorId], references: [id])
  results    EvaluationResult[]

  @@map("evaluation")
  @@schema("perf_review")
}

model RubricCategory {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  title        String
  displayOrder Int      @default(0)
  deletedAt    DateTime?

  levels   RubricPerformanceLevel[]
  subItems RubricSubItem[]
  evaluationResults EvaluationResult[]

  @@map("rubricCategory")
  @@schema("perf_review")
}

model RubricSubItem {
  id               Int                @id @default(autoincrement())
  name             String
  rubricCategoryId Int
  rubricCategory   RubricCategory     @relation(fields: [rubricCategoryId], references: [id], onDelete: Cascade)

  @@map("rubricSubItem")
  @@schema("perf_review")
}

model RubricPerformanceLevel {
  id                 Int                @id @default(autoincrement())
  rubricCategoryId   Int
  level              String
  description        String
  deletedAt          DateTime?

  rubricCategory     RubricCategory     @relation(fields: [rubricCategoryId], references: [id], onDelete: Cascade)
  evaluationResults  EvaluationResult[]

  @@map("rubricPerformanceLevel")
  @@schema("perf_review")
}

model EvaluationResult {
  id                       Int                    @id @default(autoincrement())
  evaluationId             Int
  rubricCategoryId         Int
  rubricPerformanceLevelId Int

  evaluation             Evaluation             @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  rubricCategory         RubricCategory          @relation(fields: [rubricCategoryId], references: [id], onDelete: Cascade)
  rubricPerformanceLevel RubricPerformanceLevel @relation(fields: [rubricPerformanceLevelId], references: [id])

  @@unique([rubricCategoryId, evaluationId])
  @@map("evaluationResult")
  @@schema("perf_review")
}

model user_sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@schema("perf_review")
}

enum Semester {
  SPRING
  SUMMER
  FALL
  @@schema("perf_review")
}

enum Role {
  SUPERVISOR
  STUDENT
  @@schema("perf_review")
}

model assignees {
  id            Int       @id @default(autoincrement())
  event_id      Int       @unique
  issue_id      Int
  assignee      String    @db.VarChar
  assigned_at   DateTime? @db.Timestamp(6)
  unassigned_at DateTime? @db.Timestamp(6)
  issue_number  Int?
  org_name      String    @db.VarChar
  repo_name     String    @db.VarChar
  project_name  String?   @db.VarChar
  @@schema("GitReports")
}

model contributions {
  id                 Int      @id @default(autoincrement())
  user_login         String   @db.VarChar
  date               DateTime @db.Date
  contribution_count Int

  @@unique([user_login, date], map: "unique_user_date")
  @@schema("GitReports")
}

model events {
  id           Int      @id @default(autoincrement())
  event_id     Int?     @unique
  event_type   String   @db.VarChar
  issue_id     Int
  issue_number Int
  org_name     String   @db.VarChar
  repo_name    String   @db.VarChar
  repo_link    String   @db.VarChar
  project_name String   @db.VarChar
  project_link String   @db.VarChar
  assignees    String[] @db.VarChar
  column_name  String   @db.VarChar
  created_at   DateTime @db.Timestamp(6)
  @@schema("GitReports")
}

model releases {
  id           Int      @id @default(autoincrement())
  release_id   Int      @unique
  repo_name    String   @db.VarChar
  org_name     String   @db.VarChar
  tag_name     String   @db.VarChar
  release_name String?  @db.VarChar
  created_at   DateTime @db.Timestamp(6)
  project_name String?  @db.VarChar
  @@schema("GitReports")
}

model user_contributions_by_year {
  user_login          String @db.VarChar
  contribution_year   String @db.VarChar
  commits             Int?
  issues              Int?
  pull_requests       Int?
  code_reviews        Int?
  total_contributions Int?

  @@id([user_login, contribution_year])
  @@schema("GitReports")
}
