generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  name                String
  password            String
  email               String       @unique
  role                Role
  supervisorId        Int?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  evaluationsReceived Evaluation[] @relation("StudentEvaluations")
  evaluationsGiven    Evaluation[] @relation("SupervisorEvaluations")
  teams               Team[]       @relation("UserTeams")

  @@map("user")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]   @relation("UserTeams")
}

model Evaluation {
  id           Int      @id @default(autoincrement())
  studentId    Int
  supervisorId Int?
  year         Int
  semester     Semester
  type         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  team         String?

  student    User               @relation("StudentEvaluations", fields: [studentId], references: [id])
  supervisor User?              @relation("SupervisorEvaluations", fields: [supervisorId], references: [id])
  results    EvaluationResult[]

  @@map("evaluation")
}

model RubricCategory {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  title        String
  displayOrder Int      @default(0)

  levels   RubricPerformanceLevel[]
  subItems RubricSubItem[] // Using the relation instead of a string array
  evaluationResults EvaluationResult[]

  @@map("rubricCategory")
}

model RubricSubItem {
  id               Int                @id @default(autoincrement())
  name             String
  rubricCategoryId Int
  rubricCategory   RubricCategory     @relation(fields: [rubricCategoryId], references: [id], onDelete: Cascade)

  @@map("rubricSubItem")
}

model RubricPerformanceLevel {
  id                 Int                @id @default(autoincrement())
  rubricCategoryId   Int
  level              String
  description        String

  rubricCategory     RubricCategory     @relation(fields: [rubricCategoryId], references: [id], onDelete: Cascade)
  evaluationResults  EvaluationResult[]

  @@map("rubricPerformanceLevel")
}

model EvaluationResult {
  id                       Int                    @id @default(autoincrement())
  evaluationId             Int
  rubricCategoryId         Int
  rubricPerformanceLevelId Int

  evaluation             Evaluation             @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  rubricCategory         RubricCategory          @relation(fields: [rubricCategoryId], references: [id], onDelete: Cascade)
  rubricPerformanceLevel RubricPerformanceLevel @relation(fields: [rubricPerformanceLevelId], references: [id])

  @@unique([rubricCategoryId, evaluationId])
  @@map("evaluationResult")
}

model user_sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum Semester {
  SPRING
  SUMMER
  FALL
}

enum Role {
  SUPERVISOR
  STUDENT
}